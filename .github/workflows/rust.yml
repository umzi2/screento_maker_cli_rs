name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions/setup-rust@v1
        with:
          toolchain: stable

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: cargo build --release

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: cargo build --release --target=x86_64-pc-windows-msvc

      - name: Build for macOS
        if: matrix.os == 'macOS-latest'
        run: cargo build --release --target=x86_64-apple-darwin

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN  }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/your_binary_name
          asset_name: your_binary_name
          asset_content_type: application/octet-stream
